/** @type {{[p: number]: string, some(predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): boolean, keys(): IterableIterator<number>, shift(): (string | undefined), values(): IterableIterator<string>, pop(): (string | undefined), slice(start?: number, end?: number): string[], find: {<S extends string>(predicate: (this:void, value: string, index: number, obj: string[]) => value is S, thisArg?: any): (S | undefined); (predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any): (string | undefined)}, join(separator?: string): string, reduceRight: {(callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, currentIndex: number, array: string[]) => U, initialValue: U): U}, copyWithin(target: number, start: number, end?: number): this, indexOf(searchElement: string, fromIndex?: number): number, every: {<S extends string>(predicate: (value: string, index: number, array: string[]) => value is S, thisArg?: any): this is S[]; (predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): boolean}, map<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any): U[], reduce: {(callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, currentIndex: number, array: string[]) => U, initialValue: U): U}, splice: {(start: number, deleteCount?: number): string[]; (start: number, deleteCount: number, ...items: string[]): string[]}, forEach(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any): void, [Symbol.iterator](): IterableIterator<string>, length: number, concat: {(...items: ConcatArray<string>): string[]; (...items: ConcatArray<string> | string[]): string[]}, sort(compareFn?: (a: string, b: string) => number): this, reverse(): string[], fill(value: string, start?: number, end?: number): this, push(...items: string[]): number, [Symbol.unscopables](): {copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean}, filter: {<S extends string>(predicate: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S[]; (predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string[]}, findIndex(predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any): number, lastIndexOf(searchElement: string, fromIndex?: number): number, entries(): IterableIterator<[number, string]>, toString(): string, unshift(...items: string[]): number, toLocaleString(): string}} */
const px0_100 = {...Array.from(Array(101)).map((_, i) => `${i}px`)};

module.exports = {
  content: ["./**/*.html"],
  theme: {
    extend: {
      spacing: px0_100
    },
  },
  plugins: [],
}
